class GRest extends GObservable{constructor(t,e){super();this.t=[];this.s={};this.url=t.replace(/[\/]*$/,"/");this.authorization=e}endpoints(t){let e=this,s=this.t,i;if(!t)return s;this.t=Array.from(new Set(s.concat(t)));t.forEach(t=>{if(e[t])return;i=t.toLowerCase().split(/\W/).map((t,e)=>e==0?t:t.charAt(0).toUpperCase()+t.slice(1)).join("");e[i]=new GRestEndpoint(t,this)});return e}headers(t){let e=this.s;if(!t)return e;Object.assign(this.s,t);Object.entries(e).forEach(([t,e])=>typeof e=="undefined"||e==null?delete this.s[t]:1);return this}}class GRestEndpoint{constructor(t,e){this.name=t;this.i=e;this.h=e.url+t+"/"}http(t,e){let s=t.method,i=this.i,r=i.authorization,h=t.headers=Object.assign({},i.headers(),t.headers||{});this.u(s,"pending");h["X-Requested-With"]="XMLHttpRequest";if(r&&!h.Authorization){h.Authorization=r}t.url=this.h+(t.url||"");let n=typeof e;if(n=="object"){t.params=e}else if(n!="undefined"){t.url+=e}return axios(t).then(t=>(this.u(s,"ok"),t)).catch(t=>{this.u(s,"fail");let e=t.response;throw e?{message:e.statusText||"Error",status:e.status,data:e.data}:{message:t.message||"Network Error"}})}u(t,e){this.i.notify({endpoint:this.name,method:t,status:e})}get(t){return this.o("get",t)}post(t,e){return this.l("post",t,e)}put(t,e){return this.l("put",t,e)}delete(t){return this.o("delete",t)}o(t,e){return this.http({method:t},e)}l(t,e,s){if(!s){s=e;e=null}return this.http({method:t,data:s},e)}}